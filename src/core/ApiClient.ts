/**
 * –û—à–∏–±–∫–∞, –≤–æ–∑–Ω–∏–∫–∞—é—â–∞—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å API.
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.
 */
export class ApiError extends Error {
  public statusCode?: number;
  public apiMessage?: string;

  constructor(message: string, statusCode?: number, apiMessage?: string) {
    super(message);
    this.name = "ApiError";
    this.statusCode = statusCode;
    this.apiMessage = apiMessage;
    // –í–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã instanceof –≤ TypeScript
    Object.setPrototypeOf(this, ApiError.prototype);
  }
}

/**
 * –ë–∞–∑–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API.
 * –ò–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–∑–æ–≤—ã—Ö –æ—à–∏–±–æ–∫.
 * –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å–µ—Ä–≤–∏—Å–æ–≤.
 * –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫—Ä—ã—Ç—ã ("–Ω–∏–Ω–¥–∑—è"-—Å—Ç–∞–π–ª).
 */
export class ApiClient {
  // –ë–∞–∑–æ–≤—ã–π URL API - –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ, –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–µ –∏–∑–≤–Ω–µ
  #baseURL: string;
  // API –∫–ª—é—á - –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
  #apiKey: string;

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä ApiClient.
   * @param baseURL - –ë–∞–∑–æ–≤—ã–π URL API, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∑–∞–ø—Ä–æ—Å—ã.
   * @param apiKey - API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ API.
   */
  constructor(baseURL: string, apiKey: string) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
    if (!baseURL) {
      throw new Error("Base URL cannot be empty.");
    }
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á –Ω–µ –ø—É—Å—Ç–æ–π
    if (!apiKey) {
      throw new Error("API key cannot be empty.");
    }
    this.#baseURL = baseURL;
    this.#apiKey = apiKey; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è "—Å–µ–±—è": –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ baseURL –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ—à
    // –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø—É—Ç—è–º–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.
    if (!this.#baseURL.endsWith("/")) {
      this.#baseURL += "/";
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API.
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ —Å–µ—Ä–≤–∏—Å–æ–≤.
   * @param endpoint - –ü—É—Ç—å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ baseURL).
   * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (query parameters).
   * @returns –ü—Ä–æ–º–∏—Å —Å —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–º JSON-–æ—Ç–≤–µ—Ç–æ–º.
   * @throws {ApiError} –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–µ—Ç–∏ –∏–ª–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–¥–æ–º >= 400.
   */
  async #request<T>(
    endpoint: string,
    params?: Record<string, string | number>
  ): Promise<T> {
    const url = new URL(endpoint, this.#baseURL);

    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (params) {
      Object.entries(params).forEach(
        ([key, value]: [string, string | number]) => {
          if (key.toLowerCase() !== "api_key") {
            url.searchParams.append(key, String(value));
          }
        }
      );
    }

    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º API –∫–ª—é—á
    url.searchParams.append("api_key", this.#apiKey);

    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è "—Å–µ–±—è": –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏–∏,
    // —Ç–∏–ø–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (Authorization –∏ —Ç.–¥.), –µ—Å–ª–∏ API –ø–æ—Ç—Ä–µ–±—É–µ—Ç.
    try {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π URL —Å —Ä–µ–∞–ª—å–Ω—ã–º API –∫–ª—é—á–æ–º
      console.log(`üîç –ó–∞–ø—Ä–æ—Å –∫ API (–ø–æ–ª–Ω—ã–π): ${url.toString()}`);

      // --- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ª–æ–≥ –∑–∞–ø—Ä–æ—Å–∞ ---
      console.log(
        `%c‚úÖ Connection Successful %c| %cüì¶ Package: %chttps://www.npmjs.com/package/tmdb-xhzloba`,
        "color: green; font-weight: bold;", // –°—Ç–∏–ª—å –¥–ª—è "‚úÖ Connection Successful"
        "color: #ccc;", // –°—Ç–∏–ª—å –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        "color: #CB3837; font-weight: bold;", // –°—Ç–∏–ª—å –¥–ª—è "üì¶ Package:" (–∫—Ä–∞—Å–Ω—ã–π NPM)
        "color: #CB3837; text-decoration: underline;" // –°—Ç–∏–ª—å –¥–ª—è —Å—Å—ã–ª–∫–∏ NPM
      );
      // --->>> END DEBUGGING
      const response = await fetch(url.toString());

      if (!response.ok) {
        // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞
        let apiMessage: string | undefined;
        try {
          const errorData = await response.json();
          apiMessage =
            errorData?.message ||
            errorData?.status_message ||
            JSON.stringify(errorData);
        } catch (e) {
          // –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –æ—à–∏–±–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç
          try {
            apiMessage = await response.text();
          } catch (textErr) {
            // –ï—Å–ª–∏ –∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–ª—É—á–∏–ª–∏
            apiMessage = "Could not retrieve error details.";
          }
        }
        throw new ApiError(
          `API request failed: ${response.status} ${response.statusText}`,
          response.status,
          apiMessage
        );
      }

      // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è "—Å–µ–±—è": –û–∂–∏–¥–∞–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ.
      // –ï—Å–ª–∏ API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –Ω—É–∂–Ω–∞ –¥–æ–ø. –æ–±—Ä–∞–±–æ—Ç–∫–∞.
      return (await response.json()) as T;
    } catch (error) {
      if (error instanceof ApiError) {
        // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—à—É –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        throw error;
      }
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å fetch
      console.error("Network or fetch error:", error);
      throw new ApiError(
        "Network request failed",
        undefined,
        error instanceof Error ? error.message : String(error)
      );
    }
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–æ–≤.
   * –Ø–≤–ª—è–µ—Ç—Å—è –æ–±–µ—Ä—Ç–∫–æ–π –Ω–∞–¥ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º #request, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏.
   * @param endpoint –ü—É—Ç—å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É.
   * @param params Query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.
   * @returns –ü—Ä–æ–º–∏—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ç–∏–ø–∞ T.
   */
  public async get<T>(
    endpoint: string,
    params?: Record<string, string | number>
  ): Promise<T> {
    // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è "—Å–µ–±—è": –≠—Ç–æ —Ñ–∞—Å–∞–¥–Ω—ã–π –º–µ—Ç–æ–¥.
    // –í—Å—è –ª–æ–≥–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ #request.
    return this.#request<T>(endpoint, params);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–∑–æ–≤—ã–π URL API.
   * @returns –¢–µ–∫—É—â–∏–π –±–∞–∑–æ–≤—ã–π URL.
   */
  public getBaseUrl(): string {
    return this.#baseURL;
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π URL API.
   * @param newBaseUrl –ù–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏.
   */
  public setBaseUrl(newBaseUrl: string): void {
    if (!newBaseUrl) {
      throw new Error("Base URL cannot be empty.");
    }
    this.#baseURL = newBaseUrl;
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ baseURL –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ—à
    if (!this.#baseURL.endsWith("/")) {
      this.#baseURL += "/";
    }
  }
}
